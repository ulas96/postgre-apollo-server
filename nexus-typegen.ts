/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  BurnedTokens: { // root type
    benefit?: string | null; // String
    burnedAmount?: string | null; // String
    createdAt?: string | null; // String
    timestamp?: number | null; // Float
    transactionHash?: string | null; // String
    walletAddress?: string | null; // String
  }
  Event: { // root type
    appName: string; // String!
    blockNumber: number; // Int!
    contractAddress: string; // String!
    createdAt: string; // String!
    eventData: string; // String!
    eventName: string; // String!
    eventSignature: string; // String!
    id: number; // Int!
    logIndex: number; // Int!
    parsedData: string[]; // [String!]!
    timestamp: number; // Float!
    transactionHash: string; // String!
  }
  LiquidationHistory: { // root type
    isLiquidated: boolean; // Boolean!
    lastLiquidation?: number | null; // Int
  }
  MintedTokens: { // root type
    cost?: string | null; // String
    createdAt?: string | null; // String
    currentValue?: string | null; // String
    mintedAmount?: string | null; // String
    pnlPercentage?: string | null; // String
    timestamp?: number | null; // Float
    transactionHash?: string | null; // String
    walletAddress?: string | null; // String
  }
  Query: {};
  Transfer: { // root type
    createdAt: string; // String!
    from: string; // String!
    timestamp: number; // Float!
    to: string; // String!
    transactionHash: string; // String!
    value: string; // String!
  }
  WalletPosition: { // root type
    averageEntryPrice: string; // String!
    burnedAmount: string; // String!
    currentXAVAXPrice: string; // String!
    mintedAmount: string; // String!
    pnlPercentage: string; // String!
    positionAmount: string; // String!
    positionValue: string; // String!
    transfersIn: string; // String!
    transfersOut: string; // String!
    walletAddress: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  BurnedTokens: { // field return type
    benefit: string | null; // String
    burnedAmount: string | null; // String
    createdAt: string | null; // String
    timestamp: number | null; // Float
    transactionHash: string | null; // String
    walletAddress: string | null; // String
  }
  Event: { // field return type
    appName: string; // String!
    blockNumber: number; // Int!
    contractAddress: string; // String!
    createdAt: string; // String!
    eventData: string; // String!
    eventName: string; // String!
    eventSignature: string; // String!
    id: number; // Int!
    logIndex: number; // Int!
    parsedData: string[]; // [String!]!
    timestamp: number; // Float!
    transactionHash: string; // String!
  }
  LiquidationHistory: { // field return type
    isLiquidated: boolean; // Boolean!
    lastLiquidation: number | null; // Int
  }
  MintedTokens: { // field return type
    cost: string | null; // String
    createdAt: string | null; // String
    currentValue: string | null; // String
    mintedAmount: string | null; // String
    pnlPercentage: string | null; // String
    timestamp: number | null; // Float
    transactionHash: string | null; // String
    walletAddress: string | null; // String
  }
  Query: { // field return type
    burnedTokens: Array<NexusGenRootTypes['BurnedTokens'] | null>; // [BurnedTokens]!
    events: NexusGenRootTypes['Event'][]; // [Event!]!
    liquidationHistory: NexusGenRootTypes['LiquidationHistory'] | null; // LiquidationHistory
    mintedTokens: Array<NexusGenRootTypes['MintedTokens'] | null>; // [MintedTokens]!
    transfers: NexusGenRootTypes['Transfer'][]; // [Transfer!]!
    walletPosition: NexusGenRootTypes['WalletPosition'] | null; // WalletPosition
  }
  Transfer: { // field return type
    createdAt: string; // String!
    from: string; // String!
    timestamp: number; // Float!
    to: string; // String!
    transactionHash: string; // String!
    value: string; // String!
  }
  WalletPosition: { // field return type
    averageEntryPrice: string; // String!
    burnedAmount: string; // String!
    currentXAVAXPrice: string; // String!
    mintedAmount: string; // String!
    pnlPercentage: string; // String!
    positionAmount: string; // String!
    positionValue: string; // String!
    transfersIn: string; // String!
    transfersOut: string; // String!
    walletAddress: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  BurnedTokens: { // field return type name
    benefit: 'String'
    burnedAmount: 'String'
    createdAt: 'String'
    timestamp: 'Float'
    transactionHash: 'String'
    walletAddress: 'String'
  }
  Event: { // field return type name
    appName: 'String'
    blockNumber: 'Int'
    contractAddress: 'String'
    createdAt: 'String'
    eventData: 'String'
    eventName: 'String'
    eventSignature: 'String'
    id: 'Int'
    logIndex: 'Int'
    parsedData: 'String'
    timestamp: 'Float'
    transactionHash: 'String'
  }
  LiquidationHistory: { // field return type name
    isLiquidated: 'Boolean'
    lastLiquidation: 'Int'
  }
  MintedTokens: { // field return type name
    cost: 'String'
    createdAt: 'String'
    currentValue: 'String'
    mintedAmount: 'String'
    pnlPercentage: 'String'
    timestamp: 'Float'
    transactionHash: 'String'
    walletAddress: 'String'
  }
  Query: { // field return type name
    burnedTokens: 'BurnedTokens'
    events: 'Event'
    liquidationHistory: 'LiquidationHistory'
    mintedTokens: 'MintedTokens'
    transfers: 'Transfer'
    walletPosition: 'WalletPosition'
  }
  Transfer: { // field return type name
    createdAt: 'String'
    from: 'String'
    timestamp: 'Float'
    to: 'String'
    transactionHash: 'String'
    value: 'String'
  }
  WalletPosition: { // field return type name
    averageEntryPrice: 'String'
    burnedAmount: 'String'
    currentXAVAXPrice: 'String'
    mintedAmount: 'String'
    pnlPercentage: 'String'
    positionAmount: 'String'
    positionValue: 'String'
    transfersIn: 'String'
    transfersOut: 'String'
    walletAddress: 'String'
  }
}

export interface NexusGenArgTypes {
  Query: {
    burnedTokens: { // args
      walletAddress?: string | null; // String
    }
    events: { // args
      walletAddress?: string | null; // String
    }
    liquidationHistory: { // args
      walletAddress: string; // String!
    }
    mintedTokens: { // args
      walletAddress?: string | null; // String
    }
    transfers: { // args
      walletAddress: string; // String!
    }
    walletPosition: { // args
      walletAddress: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}